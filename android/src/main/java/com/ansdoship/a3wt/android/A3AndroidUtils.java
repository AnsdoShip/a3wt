package com.ansdoship.a3wt.android;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.res.AssetManager;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.Paint;
import android.graphics.Typeface;
import android.graphics.drawable.Drawable;
import android.os.Build;
import android.os.Environment;
import android.util.DisplayMetrics;
import android.view.MotionEvent;
import com.ansdoship.a3wt.graphics.A3Font;
import com.ansdoship.a3wt.graphics.A3Graphics;
import com.ansdoship.a3wt.input.A3InputListener;

import java.io.File;
import java.io.IOException;
import java.util.List;

public class A3AndroidUtils {

    private A3AndroidUtils(){}

    /**
     * Returns a drawable object associated with a particular resource ID.
     * <p>
     * Starting in {@link Build.VERSION_CODES#LOLLIPOP}, the
     * returned drawable will be styled for the specified Context's theme.
     *
     * @param id The desired resource identifier, as generated by the aapt tool.
     *           This integer encodes the package, type, and resource entry.
     *           The value 0 is an invalid identifier.
     * @return Drawable An object that can be used to draw this resource.
     */
    @SuppressLint("UseCompatLoadingForDrawables")
    public static Drawable getDrawable(Context context, int id) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
            return context.getDrawable(id);
        } else {
            return context.getResources().getDrawable(id);
        }
    }

    public static Bitmap copyBitmap(Bitmap source) {
        return source.copy(source.getConfig(), source.isMutable());
    }

    public static int getDisplayWidth(Resources resources) {
        DisplayMetrics metrics = resources.getDisplayMetrics();
        return metrics.widthPixels;
    }

    public static int getDisplayHeight(Resources resources) {
        DisplayMetrics metrics = resources.getDisplayMetrics();
        return metrics.heightPixels;
    }

    public static Paint.Join strokeJoin2PaintStrokeJoin(int join) {
        switch (join) {
            case A3Graphics.Join.MITER: default:
                return Paint.Join.MITER;
            case A3Graphics.Join.ROUND:
                return Paint.Join.ROUND;
            case A3Graphics.Join.BEVEL:
                return Paint.Join.BEVEL;
        }
    }

    public static Paint.Cap strokeCap2PaintStrokeCap(int cap) {
        switch (cap) {
            case A3Graphics.Cap.BUTT: default:
                return Paint.Cap.BUTT;
            case A3Graphics.Cap.ROUND:
                return Paint.Cap.ROUND;
            case A3Graphics.Cap.SQUARE:
                return Paint.Cap.SQUARE;
        }
    }

    public static int paintStrokeJoin2StrokeJoin(Paint.Join join) {
        switch (join) {
            case MITER: default:
                return A3Graphics.Join.MITER;
            case ROUND:
                return A3Graphics.Join.ROUND;
            case BEVEL:
                return A3Graphics.Join.BEVEL;
        }
    }

    public static int paintStrokeCap2StrokeCap(Paint.Cap cap) {
        switch (cap) {
            case BUTT: default:
                return A3Graphics.Cap.BUTT;
            case ROUND:
                return A3Graphics.Cap.ROUND;
            case SQUARE:
                return A3Graphics.Cap.SQUARE;
        }
    }

    public static int typefaceStyle2FontStyle(int style) {
        switch (style) {
            case Typeface.NORMAL: default:
                return A3Font.Style.NORMAL;
            case Typeface.BOLD:
                return A3Font.Style.BOLD;
            case Typeface.ITALIC:
                return A3Font.Style.ITALIC;
            case Typeface.BOLD_ITALIC:
                return A3Font.Style.BOLD_ITALIC;
        }
    }

    public static int fontStyle2TypefaceStyle(int style) {
        switch (style) {
            case A3Font.Style.NORMAL: default:
                return Typeface.NORMAL;
            case A3Font.Style.BOLD:
                return Typeface.BOLD;
            case A3Font.Style.ITALIC:
                return Typeface.ITALIC;
            case A3Font.Style.BOLD_ITALIC:
                return Typeface.BOLD_ITALIC;
        }
    }

    public static Paint.Style style2PaintStyle(int style) {
        switch (style) {
            case A3Graphics.Style.STROKE: default:
                return Paint.Style.STROKE;
            case A3Graphics.Style.FILL:
                return Paint.Style.FILL;
        }
    }

    public static int paintStyle2Style(Paint.Style style) {
        switch (style) {
            case STROKE:
                return A3Graphics.Style.STROKE;
            case FILL:
                return A3Graphics.Style.FILL;
            default:
                return -1;
        }
    }

    public static boolean deleteSharedPreferences(Context context, String name) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
            return context.deleteSharedPreferences(name);
        } else {
            context.getSharedPreferences(name, Context.MODE_PRIVATE).edit().clear().commit();
            return new File(new File(context.getApplicationInfo().dataDir, "shared_prefs"), name + ".xml").delete();
        }
    }

    public static File getSharedPreferencesDir(Context context) {
        return new File(context.getApplicationInfo().dataDir, "shared_prefs");
    }

    public static Typeface readTypeface(AssetManager assets, String asset) throws IOException {
        Typeface typeface;
        try {
            typeface = Typeface.createFromAsset(assets, asset);
        }
        catch (RuntimeException e) {
            throw new IOException(e);
        }
        return typeface;
    }

    public static Typeface readTypeface(File input) throws IOException {
        Typeface typeface;
        try {
            typeface = Typeface.createFromFile(input);
        }
        catch (RuntimeException e) {
            throw new IOException(e);
        }
        return typeface;
    }

    public static boolean isExternalStorageWriteable() {
        return Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState());
    }

    public static boolean isExternalStorageReadable() {
        return isExternalStorageWriteable() || Environment.MEDIA_MOUNTED_READ_ONLY.equals(Environment.getExternalStorageState());
    }

    public static File getStorageDir() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
            return Environment.getStorageDirectory();
        }
        else {
            return isExternalStorageWriteable() ? Environment.getExternalStorageDirectory() : Environment.getDataDirectory();
        }
    }

    public static boolean commonOnTouchEvent(List<A3InputListener> listeners, MotionEvent event) {
        boolean downResult = false;
        boolean moveResult = false;
        boolean upResult = false;
        int pointerIndex = event.getPointerCount() - 1;
        float x = event.getX(pointerIndex);
        float y = event.getY(pointerIndex);
        for (A3InputListener listener : listeners) {
            switch (event.getAction()) {
                case MotionEvent.ACTION_DOWN:
                case MotionEvent.ACTION_POINTER_DOWN:
                    if (!downResult) downResult = listener.pointerDown(x, y, pointerIndex, A3InputListener.Button.LEFT);
                    break;
                case MotionEvent.ACTION_MOVE:
                    if (!moveResult) moveResult = listener.pointerDragged(x, y, pointerIndex, A3InputListener.Button.LEFT);
                    break;
                case MotionEvent.ACTION_UP:
                case MotionEvent.ACTION_POINTER_UP:
                    if (!upResult) upResult = listener.pointerUp(x, y, pointerIndex, A3InputListener.Button.LEFT);
                    break;
            }
        }
        return downResult || moveResult || upResult;
    }

    public static int getScreenWidth(Resources resources) {
        return resources.getDisplayMetrics().widthPixels;
    }

    public static int getScreenHeight(Resources resources) {
        return resources.getDisplayMetrics().heightPixels;
    }

    public static int getPPI(Resources resources) {
        return resources.getDisplayMetrics().densityDpi;
    }

    public static float getDensity(Resources resources) {
        return resources.getDisplayMetrics().density;
    }

    public static float getScaledDensity(Resources resources) {
        return resources.getDisplayMetrics().scaledDensity;
    }

}
