package com.ansdoship.a3wt.android;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.Paint;
import android.graphics.drawable.Drawable;
import android.os.Build;
import android.util.DisplayMetrics;
import androidx.annotation.DrawableRes;
import androidx.annotation.NonNull;
import com.ansdoship.a3wt.graphics.A3Graphics;

public class A3AndroidUtils {

    private A3AndroidUtils(){}

    /**
     * Returns a drawable object associated with a particular resource ID.
     * <p>
     * Starting in {@link Build.VERSION_CODES#LOLLIPOP}, the
     * returned drawable will be styled for the specified Context's theme.
     *
     * @param id The desired resource identifier, as generated by the aapt tool.
     *           This integer encodes the package, type, and resource entry.
     *           The value 0 is an invalid identifier.
     * @return Drawable An object that can be used to draw this resource.
     */
    @SuppressLint("UseCompatLoadingForDrawables")
    public static Drawable getDrawable(@NonNull Context context, @DrawableRes int id) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
            return context.getDrawable(id);
        } else {
            return context.getResources().getDrawable(id);
        }
    }

    public static Bitmap copyBitmap(@NonNull Bitmap source) {
        return source.copy(source.getConfig(), source.isMutable());
    }

    public static int getDisplayWidth(@NonNull Resources resources) {
        DisplayMetrics metrics = resources.getDisplayMetrics();
        return metrics.widthPixels;
    }

    public static int getDisplayHeight(@NonNull Resources resources) {
        DisplayMetrics metrics = resources.getDisplayMetrics();
        return metrics.heightPixels;
    }

    public static Paint.Join strokeJoin2PaintStrokeJoin(int join) {
        switch (join) {
            case A3Graphics.Join.MITER: default:
                return Paint.Join.MITER;
            case A3Graphics.Join.ROUND:
                return Paint.Join.ROUND;
            case A3Graphics.Join.BEVEL:
                return Paint.Join.BEVEL;
        }
    }

    public static Paint.Cap strokeCap2PaintStrokeCap(int cap) {
        switch (cap) {
            case A3Graphics.Cap.BUTT: default:
                return Paint.Cap.BUTT;
            case A3Graphics.Cap.ROUND:
                return Paint.Cap.ROUND;
            case A3Graphics.Cap.SQUARE:
                return Paint.Cap.SQUARE;
        }
    }

    public static int paintStrokeJoin2StrokeJoin(Paint.Join join) {
        switch (join) {
            case MITER: default:
                return A3Graphics.Join.MITER;
            case ROUND:
                return A3Graphics.Join.ROUND;
            case BEVEL:
                return A3Graphics.Join.BEVEL;
        }
    }

    public static int paintStrokeCap2StrokeCap(Paint.Cap cap) {
        switch (cap) {
            case BUTT: default:
                return A3Graphics.Cap.BUTT;
            case ROUND:
                return A3Graphics.Cap.ROUND;
            case SQUARE:
                return A3Graphics.Cap.SQUARE;
        }
    }

}
