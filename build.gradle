// Top-level build file where you can add configuration options common to all sub-projects/modules.
plugins {
    id 'com.android.library' version '7.3.1' apply false
}

subprojects {
    apply plugin: 'signing'
    apply plugin: 'maven-publish'

    ext {
        libraryName = 'Notcute'
        libraryGroupName = 'io.notcute'
        libraryPublishGroupName = 'io.github.notcute'
        libraryDescription = 'Cross-platform direct UI Toolkit for Java. Currently supports Windows/Linux/macOS/Android.'
        libraryUrl = 'https://github.com/notcute/notcute'

        libraryVersionCode = 1
        libraryVersionName = '0.1.0-SNAPSHOT'

        libraryCoreSourceCompatibility = JavaVersion.VERSION_1_8
        libraryCoreTargetCompatibility = JavaVersion.VERSION_1_8

        libraryLicenseName = 'The Apache License, Version 2.0'
        libraryLicenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        libraryScmConnection = 'scm:git:git@github.com/notcute/notcute.git'
        libraryScmDeveloperConnection = libraryScmConnection
        libraryScmUrl = libraryUrl

        libraryAndroidCompileSdk = 33
        libraryAndroidMinSdk = 16
        libraryAndroidTargetSdk = 33
        libraryAndroidSourceCompatibility = JavaVersion.VERSION_1_8
        libraryAndroidTargetCompatibility = JavaVersion.VERSION_1_8

        libraryJavaSESourceCompatibility = JavaVersion.VERSION_1_8
        libraryJavaSETargetCompatibility = JavaVersion.VERSION_1_8
    }

    group libraryGroupName
    version libraryVersionCode
}

configure ([project(':core'), project(':signalslot'), project(':collections'), project('geom2d'), project('g2d-core'),
            project(':ui-core'), project(':commons'), project(':audio-core'), project(':widgets')]) {
    apply plugin: 'java-library'
    sourceCompatibility = libraryCoreSourceCompatibility
    targetCompatibility = libraryCoreTargetCompatibility
}

configure ([project(':g2d-awt'), project(':ui-awt'), project(':javase'), project(':audio-javase'), project(':g2d-swt'), project(':ui-swt')]) {
    apply plugin: 'java-library'
    sourceCompatibility = libraryJavaSESourceCompatibility
    targetCompatibility = libraryJavaSETargetCompatibility
}

// Java projects
configure ([project(':core'), project(':signalslot'), project(':collections'), project('geom2d'), project('g2d-core'),
project(':g2d-awt'), project(':ui-core'), project(':ui-awt'), project(':javase'), project(':commons'), project(':audio-core'), project(':audio-javase'),
project(':widgets'), project(':g2d-swt'), project(':ui-swt')]) {

    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

    dependencies {
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    }

    test {
        useJUnitPlatform()
    }

    // publish
    java {
        withJavadocJar()
        withSourcesJar()
    }

    javadoc {
        if(JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                groupId = libraryGroupName
                artifactId = "${rootProject.name}-${project.name}"
                version = libraryVersionName
                from components.java
                pom {
                    name = libraryPublishGroupName
                    description = libraryDescription
                    url = libraryUrl
                    licenses {
                        license {
                            name = libraryLicenseName
                            url = libraryLicenseUrl
                        }
                    }
                    developers {
                        developer {
                            id = 'Tianscar'
                            name = 'Tiansword Carbonicacid'
                            email = 'tianscar@protonmail.com'
                        }
                    }
                    scm {
                        connection = libraryScmConnection
                        developerConnection = libraryScmDeveloperConnection
                        url = libraryScmUrl
                    }
                }
            }
        }
        repositories {
            maven {
                name = "OSSRH"
                if (project.version.toString().endsWith("-SNAPSHOT")) {
                    url = "https://s01.oss.sonatype.org/content/repositories/snapshots"
                } else {
                    url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                }
                credentials {
                    username = findProperty("ossrhUsername") ?: System.getenv("OSSRH_USERNAME")
                    password = findProperty("ossrhPassword") ?: System.getenv("OSSRH_PASSWORD")
                }
            }
        }
    }

    signing {
        def signingKey = findProperty("signingKey") ?: System.getenv("GPG_KEY")
        def signingPassword = findProperty("signingPassword") ?:System.getenv("GPG_PASSWORD")
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign(publishing.publications.mavenJava)
    }
}

// Android projects
configure ([project(':android'), project(':g2d-android'), project(':ui-android'), project(':audio-android')]) {
    apply plugin: 'com.android.library'

    android {
        namespace libraryGroupName + '.' + project.name.replaceAll('-', '.')
        compileSdk libraryAndroidCompileSdk

        defaultConfig {
            minSdk libraryAndroidMinSdk
            targetSdk libraryAndroidTargetSdk

            testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
            consumerProguardFiles "consumer-rules.pro"

            //multiDexEnabled true
        }
        buildTypes {
            release {
                minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            }
        }
        compileOptions {
            sourceCompatibility libraryAndroidSourceCompatibility
            targetCompatibility libraryAndroidTargetCompatibility

            //coreLibraryDesugaringEnabled true
        }
    }

    dependencies {
        testImplementation 'junit:junit:4.13.2'
        androidTestImplementation 'androidx.test.ext:junit:1.1.5'
        androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'

        //coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.2.2'
    }

    // publish
    android {
        publishing {
            singleVariant('release') {
                withSourcesJar()
                withJavadocJar()
            }
        }
    }
    publishing {

        publications {
            release(MavenPublication) {
                groupId = libraryGroupName
                artifactId = rootProject.name
                version = libraryVersionName
                afterEvaluate {
                    from components.release
                }
                pom {
                    name = libraryPublishGroupName
                    description = libraryDescription
                    url = libraryUrl
                    licenses {
                        license {
                            name = libraryLicenseName
                            url = libraryLicenseUrl
                        }
                    }
                    developers {
                        developer {
                            id = 'Tianscar'
                            name = 'Tiansword Carbonicacid'
                            email = 'tianscar@protonmail.com'
                        }
                    }
                    scm {
                        connection = libraryScmConnection
                        developerConnection = libraryScmDeveloperConnection
                        url = libraryScmUrl
                    }
                }
            }
        }
        repositories {
            maven {
                name = "OSSRH"
                if (project.version.toString().endsWith("-SNAPSHOT")) {
                    url = "https://s01.oss.sonatype.org/content/repositories/snapshots"
                } else {
                    url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                }
                credentials {
                    username = findProperty("ossrhUsername") ?: System.getenv("OSSRH_USERNAME")
                    password = findProperty("ossrhPassword") ?: System.getenv("OSSRH_PASSWORD")
                }
            }
        }
    }

    signing {
        def signingKey = findProperty("signingKey") ?: System.getenv("GPG_KEY")
        def signingPassword = findProperty("signingPassword") ?:System.getenv("GPG_PASSWORD")
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign(publishing.publications.release)
    }
}